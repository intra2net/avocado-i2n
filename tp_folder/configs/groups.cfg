# groups.cfg - main configuration for all test variants

# Include the base config files
include groups-base.cfg

variants:

    # Reused original subtests
    # ------------------------
    # These tests have almost identical parameters with the original Cartesian
    # config variants included in the VT plugin and the test code can be found
    # there too. Since we rely on the original sources as much as possible but
    # have a separate config parsing chain (two in fact, one for test objects
    # and in particular virtual machines and one for test nodes or simply tests)
    # we have to include these original variants here and separate them from our
    # own internal variants. It is advised to change anything here only if you
    # are willing to tinker with the installation process of new vms, keeping
    # modification to the minimum when possible.
    - original:
        get_state_vms =
        set_state_images = install
        variants:

            # This install variant makes use of steps or stepmaker tools
            - install:
                type = steps
                start_vm = yes
                kill_vm = yes
                kill_vm_gracefully = yes
                kill_vm_on_error = yes
                shutdown_cleanly = yes
                shutdown_cleanly_timeout = 120
                fail_if_stuck_for = 300
                stuck_detection_history = 2
                keep_screendump_history = yes
                encode_video_files = no
                kill_timeout = 60
                #kill_vm_timeout = 0
                #kill_vm_timeout_on_error = 0
                test_timeout = 3600

            # This install variant makes use of unattended install tools
            - unattended_install:
                virt_test_type = qemu libvirt
                type = unattended_install
                start_vm = no
                kill_vm = yes
                kill_vm_gracefully = yes
                kill_vm_on_error = yes
                test_timeout = 3600
                shutdown_cleanly = yes
                shutdown_cleanly_timeout = 120
                keep_screendump_history = yes
                encode_video_files = no
                guest_port_unattended_install = 12323
                kernel = vmlinuz
                initrd = initrd.img
                # NOTE: Because the vms are parsed then postprocessed in a customized way,
                # the parameters in a conditional block of a given variant which have defaults
                # outside of the conditional block will be overwritten by their defaults.
                # A clean solution to this is to accept that the Cartesian parser does not
                # work in a symmetric way and to define conditional blocks only for variants
                # which are already defined, e.g. 'Windows' is already defined at this stage.
                Windows:
                    kernel =
                    initrd =
                # Throw errors if guest screen is inactive
                inactivity_watcher = error
                # Inactivity treshold to error the test
                inactivity_treshold = 1800
                # Set migrate_background to yes to run migration in parallel
                # migrate_background = yes
                image_verify_bootable(_.*)? ?= no
                # Backup images from nfs when install failed
                image_copy_on_error = no
                # This value is setup for huge page set up.
                # Lowest memory size for on vm to finish install test based on the
                # anaconda memory check size. Tested it with RHEL, Windows and newest
                # Fedora guests. For other guests like ubuntu if your install failed with
                # don't have enough RAM error from anaconda, please enlarge this value.
                lowest_mem = 512
                variants:
                    - aio_threads:
                        image_aio = threads
                # Add some special types of installation
                variants:
                    - default_install:
                        # Installation without any special configuration
                # Way of delivering ks file into the guest
                variants:
                    # Additional iso with kickstart is attached into the guest
                    - extra_cdrom_ks:
                        unattended_delivery_method = cdrom
                        cdroms(_.*)? ?+= " unattended"
                        drive_index_unattended = 1
                        drive_index_cd1(_.*)? ?= 2
                    # Kickstart is packed into the installation iso
                    - in_cdrom_ks:
                        only unattended_install.cdrom
                        unattended_delivery_method = integrated
                    # Autotest starts simple http server providing kickstart
                    - http_ks:
                        unattended_delivery_method = url
                    # Image with kickstart is attached into the guest as floppy drive
                    - floppy_ks:
                        unattended_delivery_method = floppy

                variants:
                    # Install guest from cdrom
                    - cdrom:
                        # TODO: is this needed for both kvm and libvirt?
                        # This option is only used in windows installation case,
                        # since linux use kernel/initrd option of qemu.
                        boot_once(_.*)? ?= d
                        medium = cdrom
                        redirs(_.*)? ?+= " unattended_install"
                    # Install guest from http/ftp url
                    - url:
                        medium = url
                        url = REPLACE_THIS_WITH_TREE_URL
                    # Install guest from nfs nfs_server:nfs_dir
                    - nfs:
                        medium = nfs
                        nfs_server = REPLACE_THIS_WITH_NFS_SERVER
                        nfs_dir = REPLACE_THIS_WITH_NFS_DIRECTORY
                    # Install guest with a remote kickstart
                    - remote_ks:
                        medium = url
                        # TODO: does kvm need to prefix this with '--append'?
                        extra_params = " ks=REPLACE_THIS_WITH_URL_OF_KS"
                        url = REPLACE_THIS_WITH_TREE_URL
                    # Install guest using pxe/tftp  (virt-install --pxe)
                    - pxe:
                        medium = pxe
                    # Install guest using kernel/initrd pair from directory
                    - kernel_initrd:
                        medium = kernel_initrd
                    - import:
                        virt_test_type = libvirt
                        no extra_cdrom_ks, in_cdrom_ks, http_ks, floppy_ks
                        medium = import
                        force_create_image = no
                        create_image = no

    # Actual internal subtests
    # ------------------------
    # These tests are internal for the test suite in the sense that they are
    # only used to setup the actual (leaf node) tests, i.e. they represent no
    # real use cases eligible for functional tests of a product but are still
    # required as a dependency for such tests. By default, we distinguish among
    # stateless, automated, and manual subvariants clarified further below.
    - internal:
        variants:

            # Stateless setup variants
            # ------------------------
            # These tests are variants mapped to from various tools that will not
            # perform any state modification of the vm or image objects (but always
            # will for nets), even root state changes like image creation or vm
            # boot will be skipped so that the modification on such stateful objects
            # will only comprise of stateless operations.
            - stateless:
                get =
                # TODO: objects cannot be overwritten more easily for long now
                #get_state =
                get_state(_vm.*)? ?=
                # TODO: currently we need network setup for just about everything
                get_state_nets = root
                variants:
                    - noop:
                    - manage:
                        type = shared_manage_vm
                        variants:
                            - run:
                                vm_action = run
                            - download:
                                vm_action = download
                            - upload:
                                vm_action = upload
                            - start:
                                vm_action = boot
                                start_vm = yes
                            - stop:
                                vm_action = shutdown
                                kill_vm = yes
                                kill_timeout = 60
                                shutdown_method = shell

            # Stateful setup variants
            # ------------------------
            # These tests are variants mapped to from various tools that will always
            # perform state modification of the vm or image objects (and of course
            # nets), if no explict states are specified it will default to root state
            # changes like image creation or vm boot then any further operations.
            - stateful:
                type = shared_manage_vm
                variants:
                    - check:
                        vm_action = check
                    - get:
                        vm_action = get
                    - set:
                        vm_action = set
                    - unset:
                        vm_action = unset
                    - push:
                        vm_action = push
                    - pop:
                        vm_action = pop

            # Automated setup variants
            # --------------------------------------
            # Variants used for any canonical setup of vms in their entirety or
            # simply their images to be reused across multiple tests.
            - automated:
                kill_vm_gracefully = yes
                variants:
                    # Main customization stage for most vms after installation
                    - customize:
                        # below we customize image root nodes for installation
                        get_images = install
                        get_state_images = install
                        set_state_images = customize
                        type = shared_customize_vm
                        guest_avocado_enabled = no
                        Linux:
                            additional_deployment_dir = linux
                            guest_avocado_enabled = yes
                            tmp_dir = /tmp
                            Fedora, CentOS:
                                get_images = unattended_install.cdrom.extra_cdrom_ks
                                serialization_prep_needed = yes
                            Ubuntu, Kali:
                                get_images = unattended_install.cdrom.in_cdrom_ks
                                # original tmp directory is not persistent
                                tmp_dir = /var/tmp
                        Windows:
                            get_images = unattended_install.cdrom.in_cdrom_ks
                            additional_deployment_dir = windows
                            tmp_dir = C:\
                            host_dhcp_service = yes
                            WinXP:
                                windows_vo_version = winxp
                            WinVista:
                                windows_vo_version = winvista
                            Win7:
                                windows_vo_version = win7
                            Win8:
                                windows_vo_version = win8
                            Win10:
                                windows_vo_version = win10
                    # Additional customization possible only when left running
                    - on_customize:
                        get_images = customize
                        get_state_images = customize
                        set_state_vms = on_customize
                        type = shared_manage_vm
                        vm_action = boot
                        type = shared_customize_on
                    # Main network connectivity stage for most vms
                    - connect:
                        get_images = customize
                        get_state_images = customize
                        set_state_images = connect
                        type = shared_connect_vm
                        host_services = yes
                    # Suggested nodes for setup of a virtual user on most vms
                    - linux_virtuser:
                        get_images = customize
                        get_state_images = customize
                        set_state_images = linux_virtuser
                        type = shared_linux_virtuser
                        linux_vo_version = centos8
                    - windows_virtuser:
                        get_images = customize
                        get_state_images = customize
                        set_state_images = windows_virtuser
                        type = shared_windows_virtuser
                        packages_location = C:/packages/
                        WinXP:
                            windows_vo_version = winxp
                        WinVista:
                            windows_vo_version = winvista
                        Win7:
                            windows_vo_version = win7
                        Win8:
                            windows_vo_version = win8
                        Win10:
                            windows_vo_version = win10

            # Manual or partially automated setup variants
            # --------------------------------------------
            # These test nodes perform only partial setup requiring human
            # intervention of some sort. They can still be useful for frequent
            # routines that can prepare an environment for some further
            # diagnostic or operation.
            - manual:
                get =
                # TODO: objects cannot be overwritten more easily for long now
                #get_state =
                get_state(_m.*)? ?=
                # TODO: currently we need network setup for just about everything
                get_state_nets = root
                variants:
                    # GUI and other development tools as pseudotests
                    - develop:
                        capture_autoopen = no
                        capture_editor = kolourpaint
                        variants:
                            # Use this to create new GUI tests more efficiently
                            - generator:
                                type = shared_multigui_generator
                            # Use this to run stress or large size tests
                            - testbed:
                                take_regular_screendumps = yes
                                screendump_delay = 0.3
                                keep_screendumps = yes
                                type = shared_multigui_testbed


    # Custom product subtests
    # ------------------------
    # Any remaining variant here is the main portion of this config defining
    # new test groups or groups of tests covering some funtionality of the
    # product that the test suite is centered around. In our example, we define
    # a "quicktest" variant for some minimal tests that require one basic vm
    # and run some minimal tests on top (tutorial 1 and 2), one "tutorial 3"
    # variant requiring setup for multiple vms and connecting them in a network,
    # and some more advanced tutorials involving GUI tests or external vms.

    - quicktest: install setup image_copy unattended_install.cdrom
        vms = vm1
        get_vms = on_customize
        get_state_vms = on_customize
        variants:
            - tutorial1:
                type = tutorial_step_1
                file_contents = "avocado tutorial 1"
            - tutorial2:
                type = tutorial_step_2
                files_prefix = /etc
                variants:
                    - files:
                        check_kind = files
                        must_exist = fstab
                        must_not_exist = foo shunned/file
                    - names:
                        check_kind = names
                        script = check_names
                        md5sum = e497f33127254842e12417a64a09d536

    - tutorial3:
        vms = vm1 vm2
        roles = client server
        client = vm2
        server = vm1
        get_images = customize
        get_state_images = customize
        type = tutorial_step_3
        host_dhcp_service = yes
        variants:
            - @no_remote:
                enhanced_remote_checks = no
                # TODO: due to parametric object parsing limitations the params in this conditional block
                # will not overwrite previously existing such
                vm1.qemu_kvm_centos:
                    get_images_vm1 = connect
                    get_state_images_vm1 = connect
            - remote:
                get_images_vm1 = connect
                get_state_images_vm1 = connect
                only_vm1 = qemu_kvm_centos
                vm1.qemu_kvm_centos:
                    only_vm2 = qemu_kvm_windows_10
                enhanced_remote_checks = yes
                variants:
                    - @no_util:
                        remote_util_check = no
                    - util:
                        remote_util_check = yes
                variants:
                    - @no_decorator:
                        remote_decorator_check = no
                    - decorator:
                        remote_decorator_check = yes
                        walk_prefix = /etc
                        must_exist_in_walk = fstab
                variants:
                    - @no_control:
                        remote_control_check = no
                    - control:
                        remote_control_check = yes
                        root_dir = /tmp
                        control_file = tutorial_step_3.control
                variants:
                    - @no_object:
                        remote_object_check = no
                    - object:
                        remote_object_check = yes

    - tutorial_gui:
        vms = vm1 vm2
        roles = client server
        client = vm2
        server = vm1
        get_images_vm1 = linux_virtuser
        get_state_images_vm1 = linux_virtuser
        only_vm1 = qemu_kvm_centos, qemu_kvm_fedora
        get_images_vm2 = windows_virtuser
        get_state_images_vm2 = windows_virtuser
        type = tutorial_step_gui
        host_dhcp_service = yes
        variants:
            - client_noop:
                set_state_images_vm2 = guisetup.noop
                unset_mode_images_vm2 = fi
            - client_clicked:
                set_state_images_vm2 = guisetup.clicked

    - tutorial_get:
        vms = vm1 vm2 vm3
        roles = temporary multisetup permanent
        temporary = vm1
        multisetup = vm2
        permanent = vm3
        get_images_vm1 = connect
        get_state_images_vm1 = connect
        only_vm1 = qemu_kvm_centos
        get_state_vms_vm3 = ready
        type = tutorial_step_get
        host_dhcp_service = yes
        variants:
            - explicit_noop:
                get_images_vm2 = tutorial_gui.client_noop
                get_state_images_vm2 = guisetup.noop
                set_state_vms_vm2 = getsetup.noop
                unset_mode_vms_vm2 = fi
            - explicit_clicked:
                get_images_vm2 = tutorial_gui.client_clicked
                get_state_images_vm2 = guisetup.clicked
                set_state_vms_vm2 = getsetup.clicked
            - implicit_both:
                get_images_vm2 = tutorial_gui
                # NOTE: undecided if we should support different unset mode per generated variant
                set_state_images_vm2 = getsetup

    - tutorial_finale:
        vms = vm1 vm2 vm3
        roles = temporary multisetup permanent
        temporary = vm1
        multisetup = vm2
        permanent = vm3
        get_images_vm1 = connect
        get_state_images_vm1 = connect
        only_vm1 = qemu_kvm_centos
        get_state_vms_vm3 = ready
        type = tutorial_step_get
        host_dhcp_service = yes
        get_images_vm2 = tutorial_get.implicit_both

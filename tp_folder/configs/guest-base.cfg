# guest-base.cfg - base configuration for all vms


## Intrinsic configuration
# Absolute paths and/or names of binaries (default path is /usr/bin)
qemu_binary = /usr/bin/qemu-kvm
qemu_img_binary = /usr/bin/qemu-img
qemu_io_binary = /usr/bin/qemu-io

# Virtualization type (qemu or libvirt)
vm_type = qemu
# The hypervisor uri (default, qemu://hostname/system, etc.)
# where default or unset means derive from installed system
connect_uri = default

# List of virtual machine object names (whitespace seperated)
vms = vm1 vm2 vm3
# Default virtual machine to use, when not specified by test.
# This is the the machine which we want to actually test (the
# others playing auxiliary roles).
main_vm = vm1


## Networking basics
# List of default network device object names (whitespace seperated)
# All VMs get these by default, unless specific vm name references
# are used, for example:
#
# vms = vm1 vm2 vm3 vm4
# nics = nic1 nic2 nic3
# nics_vm1 = nic2
# nics_vm2 =
# nics_vm3 = nic1 nic3
#
# Translates to:
# VM 'vm1' uses only 'nic2'
# VM 'vm2' uses no nics
# VM 'vm3' uses 'nic1' and 'nic3'
# VM 'vm4' uses all three nics
nics = nic1
# Assign random MAC by default, or specify per-nic values
# mac_nic1 = 01:02:03:04:05:06
# Use builtin dhcpd by default, or assign per-nic IP addresses
# ip_nic1 = 192.168.122.100
# Global default NIC Destination type (network, bridge (tap), user)
# Add '_<nic_name>' postfix for heterogenious mapping (nettype_nic1 = bridge)
nettype = bridge
# Global default destination name (eth1, virbr0, default, etc.)
# Add '_<nic_name>' postfix for heterogenious mapping (netdst_nic1 = virbr0)
netdst = br0
# Heterogenious models are also possible (default in guest-hw.cfg)
# nic_model_nic1 = e1000
# nic_model_nic2 = virtio
# or based on vm
# nic_model_vm1 = virtio

# Networking type (nic, user, tap, socket, vde, dump, none)
nic_mode = tap

# Set this parameter to 'yes' inorder to get IP from
# any network interface incase of multiple interface
# present in VM, default is 'no'
flexible_nic_index = no


## Hardware basics
# Emulated machine type, run following command to see supported machine type.
# qemu-kvm -M ?
machine_type = pc

# Default number of processors for each VM
smp = 1
# Config for vcpu
#vcpu_cores = 1
#vcpu_threads = 1
#vcpu_sockets = 1

# Memory for each VM
mem = 1024

# List of hypervisor-monitor object names (one per guest),
#    used to communicate with hypervisor to control guests.
#    Order cooresponds to 'vms' list above.
monitors = hmp1
# hmp1 monitor type (protocol), if only hmp1 type is going to be set
#monitor_type_hmp1 = human
# Default monitor type (protocol), if multiple types to be used
monitor_type = human
# If set catch_monitor, will start another monitor in qemu for
# VmRegister and ScreenDump threads.
catch_monitor = catch_monitor
# Pattern to get vcpu threads from monitor.
#    human monitor: thread_id=(\d+)
#    qmp monitor: u'thread_id':\s+(\d+)
vcpu_thread_pattern = "thread_id=(\d+)"

# List of block device object names (whitespace seperated)
images = image1
# Name of image, or path to device node if using image_raw_device
image_name = image
# Size of file-based qcow2 image, if image_raw-device not used.
image_size = 25G
# Use raw block device node or file-based qcow2 format
# "no" will simply add .qcow2 to the image_name
image_raw_device = no
# List of block device object names with order (whitespace seperated)
# Example: $base $sn1 $sn2
image_chain = ""
# Host-side caching to use (none, writeback, writethrough)
#    writeback - use host cache, report complete after storage write
#    writethrough - use host cache, report complete before storage write
drive_cache = none
# Verify whether guest boot from Hard disk.
image_verify_bootable = yes
# Pattern for verifying whether boot up from Hard disk.
image_unbootable_pattern = "Hard Disk.*not a bootable disk"
# Forbid image removal for vm persistence
remove_image = no

# List of optical device object names
cdroms = cd1

# USB controller object names (whitespace seperated)
#usbs = usb1 usb2
# USB controller type, run following command to see supported controller.
# `qemu-kvm -device \? 2>&1 | grep "usb.*bus PCI"`
#usb_type_usb1 = "ich9-usb-uhci1"
# Max ports on a controller.
#usb_max_port = 2
usb_controller = uhci
usbs += "isdnhub"
usb_type_isdnhub = piix3-usb-uhci
usb_max_port_isdnhub = 2
usb_bus_isdnhub = isdnhub.0

# USB device object names (whitespace separated)
usb_devices = tablet1
# USB device type, run following command to see device list on your host.
# `qemu-kvm -device \? 2>&1 | grep "bus USB"`
usb_type_tablet1 = usb-tablet
# USB Controller type which device uses.
#usb_controller = ehci
#usb_bus = usb1.0
#use xhci as the default controller on ppc platform.
pseries:
    usb_controller = xhci
    usb_type = nec-usb-xhci
    usb_type_usb1 = nec-usb-xhci
#use qemu-xchi as the default controller for q35 and aarch64 platforms.
q35, arm64-pci, arm64-mmio:
    usb_controller = xhci
    usb_type = qemu-xhci
    usb_type_usb1 = qemu-xhci

# ISA serial port support
# You can assign more than one isa serial to guest with this parameter.
# like:
# serials = "S1 S2 S3"
serials = "serial0"
serial_type = "isa-serial"

# initial PCI address for guest.
init_pci_addr = 4
# Host networking restart command line for PCI assign cases
# net_restart_cmd = /etc/init.d/network restart

# Guest Display type (vnc, sdl, spice, or nographic)
display = vnc

# VNC autoport selection.
vnc_autoport = yes

# Guest VGA type (cirrus,  std, vmware, qxl, xenfb, none)
vga = std

# Add a sga device to guest.
#enable_sga = yes

# Specify multiple sound cards seperated by comma,like 'sb16,adlib' or 'all'.
# By default, it's 'ac97'.
#soundcards = ac97

# Record vm register information during each test
vm_register_delay = 5
store_vm_register = yes

# Set boot order
boot_order = cdn
# Use the first hard disk for boot device once
boot_once = dcn
# Enable/Disable boot menu
boot_menu = off


## SPICE related options valid if display == spice,
# you should set vga = qxl to get SPICE in use
#qxl_dev_nr = 1
#qxl_dev_memory = 33554432
#spice_port = 3001
#spice_password = 123456
#spice_addr = 0

#spice_ssl = no
#spice_tls_port = 3002
#spice_tls_ciphers = DEFAULT
#spice_gen_x509 = yes

# x509_dir uses passphrase less key by default (defined in x509_secure)
# spice_x509_dir = no will enable x509_key_file, x509_cert_file and
# x509_cacert_file
#spice_x509_dir = yes

#spice_x509_prefix = /tmp/spice_x509d
#spice_x509_key_file = server-key.pem
#spice_x509_cacert_file = ca-cert.pem
#spice_x509_cert_file = server-cert.pem
#spice_x509_key_password = testPassPhrase
#spice_x509_secure = no
#spice_x509_cacert_subj = /C=CZ/L=BRNO/O=SPICE/CN=my CA
#spice_x509_server_subj = /C=CZ/L=BRNO/O=SPICE/CN=my Server
#spice_secure_channels = main, inputs

# Less common options
# image compression opts (auto_glz, auto_lz, quic, glz, lz, off)
#spice_image_compression = auto_glz
# jpeg wan compression opts (auto, never, always)
#spice_jpeg_wan_compression = auto
# zlib-glz wan compression opts (auto, never, always)
#spice_zlib_glz_wan_compression = auto
# streaming-video opts (off, all, filter)
#spice_streaming_video = all
# agent mouse opts (on, off)
#spice_agent_mouse = on
# playback compression opts (on, off)
#spice_playback_compression = on
#spice_ipv4 = yes
#spice_ipv6 = no


## Less-common and default parameters expected by some tests,
## do not modify unless you know what you're doing.
# Whether to run the qemu binary with malloc perturb set.
#    Off by default, set to 'yes' to enable
malloc_perturb = no

# Block devices
drive_index_image1 = 0
drive_index_cd1 = 1
# You can specify a blkdebug file here, relative to kvm/blkdebug dir
#    we have a premade default.conf in there. Important to note that you
#    can set this for any image defined in the config at a given time
#    drive_blkdebug_image1 = blkdebug/default.conf
#    drive_blkdebug_image1 =
# What to do whether a read error is detected, such as 'stop'
drive_rerror_image1 =
# What to do whether a write error is detected, such as 'stop'
drive_werror_image1 =
# KVM qcow2 image verification and backup settings
# Enable backup_image = yes only in some specific tests, such as
#    unattended_install. In all other tests, it should be no, so keep the global
#    as is.
backup_image = no
backup_dir = /tmp
# Enable backup_image_on_check_error = yes globally to allow isolate bad images
#    for investigation purposes
backup_image_on_check_error = no
# Enable restore_image_on_check_error = yes globally to allow restore a image
#    that had a check image with a pristine image. Works only if
#    backup_image_on_check_error = yes, of course. For tests such as
#    unattended_install, you'll have to set it to no, since if it fails, we won't
#    have an image at all, so you save time.
restore_image_on_check_error = no

## UHCI's multifunction configure.
# usb_type_usb1 = ich9-usb-uhci1
# multifunction_usb1 = on
# masterbus_usb1 = usb1
# firstport_usb1 = 0
## EHCI's multifunction configure.
# usb_type_usb2 = usb-ehci
# multifunction_usb2 = on

# Default remote shell port (SSH under linux)
shell_port = 22
# If you need more ports to be available for comm between host and guest,
# please see https://github.com/autotest/autotest/wiki/KVMAutotest-Networking

# Default scheduler params
used_cpus = 1
used_mem = 512

# Cpu model params
auto_cpu_model = yes
# cpu model in case auto_cpu_model is disabled
cpu_model = SandyBridge
cpu_model_flags = ""

# Port redirections
redirs = remote_shell
guest_port_remote_shell = 22

# Profilers
profilers = kvm_stat
Ubuntu:
profilers = perf

# Timeouts
login_timeout = 360
test_timeout = 14400

# libvirt (virt-install optional arguments)
# TODO: Rename these with 'libvirt_' prefix
use_autostart = no
use_check_cpu = yes
use_debug = yes
use_no_reboot = no
use_os_variant = no
use_os_type = yes
# if using 'url = auto' to install, url_auto_ip must match IP on
# selected virsh network or bridge
url_auto_ip = 192.168.122.1
# wait in minutes for virt-install to finish (bz still open)
use_virt_install_wait = no
virt_install_wait_time = 300

# NFS directory of guest images
images_good = fileserver.foo.com:/autotest/images_good

# Regex for get peer device for a net device.
# This regex is for Fedora host (with qemu-kvm 0.15.*),
netdev_peer_re = "\s{2,}(.*?): .*?\\\s(.*?):"
# for RHEL5 host, the regex should be:
# netdev_peer_re = "\s{2,}(.*?): .*?\s{2,}(.*?):"
# for RHEL6 host, the regex should be:
# netdev_peer_re = "\s{2,}(.*?):.*?peer=(.*?)\s"

# You can set custom commands to verify kvm module and userspace version, here
# is a convenient example for RHEL and Fedora.
#kvm_ver_cmd = "modinfo kvm | grep vermagic | awk '{print $2}'"
#kvm_userspace_ver_cmd = "grep -q el5 /proc/version && rpm -q kvm || rpm -q qemu-kvm"

image_clone_commnad = 'cp --reflink=auto %s %s'
image_remove_commnad = 'rm -rf %s'

indirect_image_blacklist = "/dev/hda.* /dev/sda.* /dev/sg0 /dev/md0"

# You may provide information about the DTM server for WHQL tests here:
#whql:
#    server_address = 10.20.30.40
#    server_shell_port = 10022
#    server_file_transfer_port = 10023
# Note that the DTM server must run rss.exe (available under deps/),
# preferably with administrator privileges.

# Additional parameter for ephemeral clients
#cdroms += cd_rip
cdrom_cd_rip = isos/autotest_rip.iso
md5sum_cd_rip = 3478b0c10fe4fec97531261bca015a7f
md5sum_1m_cd_rip = 9b4a7a1ca31099efe0f306d745f4661b


## State backend configuration
off_states_image1 = lvm
on_states_image1 = qcow2vt
# Parameters for the LVM state backend
vg_name = disk
lv_name = LogVol
lv_size = 30G
# LVM parameters that are used for disk VGs
disk_vg_size = 40000
disk_basedir = /tmp
disk_sparse_filename = virtual_hdd
use_tmpfs = yes
# Other LVM parameters
lv_pointer_name = current_state
lv_pool_name = thin_pool
lv_pool_size = 30G


## Manual guest steps
# Select run mode of our plugin - "test" for running tests with automated setup, "tool" for running manual
# setup steps (including run steps like test multimode), or "list" to list available tests.
mode = tool

# Select default setup chain for the main control file
# noop      - Simply load all plugins and do nothing (good for probing)
# create    - Create a disk, virtual group and logical volume for each virtual machine
# install   - Prepare step files and install virtual machines
# deploy    - Simply deploy changes on top of current state (will be lost after reverting to snapshot)
# internal  - Run a custom setup node without any automated setup
# boot      - Simply boot the registered virtual machines and run selected controls if any
# list      - List selected tests
# run       - Run selected tests
# download  - Download a set of files from the vm to the test results folder
# upload    - Upload a set of files to the vm's temporary folder
# unittest  - Run all unit tests available for the test suite utilities
# update    - Redeploy tests on a vm, removing all descending states
# shutdown  - Shutdown gracefully or kill living vms
# clean     - Remove the logical volumes of all installed vms
# full      - Create images, install product, deploy tests and take a clean snapshot
# check     - Check whether a given state (snapshot of saved setup) exists
# get       - Get a given state, i.e. revert to it keeping it for further reuse
# set       - Set a given state, keeping it for further reuse
# unset     - Unset a given state, making it unavailable for further reuse but freeing space
# push      - Same like setting a given state
# pop       - Pop a given state, i.e. revert to it but making it unavailable for further reuse
# <tool>    - Run any custom compatible tool, located in the tools test suite folder
# boot run shutdown - Example of a chain of setup steps (use "," to do it from command line)
setup = run
remove_set = minimal


## Miscellaneous parameters
# Custom environment path for the vms
qemu_force_use_drive_expression = yes

# guest-hw.cfg - guest hardware configuration

# machine types as main hardware variants
variants:
    - @i440fx:
        Windows:
            only i386, x86_64
        machine_type = pc
        enable_pvpanic = yes
        ioport_pvpanic = 0x505
    - q35:
        Windows:
            only i386, x86_64
        no ide
        machine_type = q35
        enable_pvpanic = yes
        ioport_pvpanic = 0x505
        # Unsupport legacy guest OS WinXP, Win2000 and Win2003, and latest
        # RHEL.5, RHEL.6 guest unsupport attach pcie device to downstream
        # port of pcie-switch, see RHBZ#1380285
        no WinXP Win2000 Win2003 RHEL.5 RHEL.6
        pci_bus = pci.0
        pcie_extra_root_port = 1
    - @pseries:
        only ppc64, ppc64le
        machine_type = pseries
        # Currently only supports standard VGA
        # Make sure below param is set 'yes' to run a
        # power8(compat mode guest) on power9 host
        power9_compat = "no"
        # Ref: https://github.com/torvalds/linux/commit/6d6ab940dc8b1c84fc86195c0f15a82ef282c8a3
        # Make sure below param is set 'yes' to restore(enable)
        # SMT after test
        restore_smt = "no"

        # configuration for power8 on power9(compat mode) remote host
        # enable it by making param as 'yes'
        power9_compat_remote = "no"

        vga = std
        del rtc_drift
        del soundcards
        serial_type = 'spapr-vty'
        nvdimm_uuid = <auto>
    - arm64-mmio:
        only aarch64
        auto_cpu_model = "no"
        cpu_model = host
        machine_type = arm64-mmio:virt
        # TODO: Change to "gic-version=max" when supported
        machine_type_extra_params = gic-version=host
        # Only virtio-gpu supported for now
        vga = virtio
        inputs = mouse1 keyboard1
        input_dev_type_mouse1 = mouse
        input_dev_type_keyboard1 = keyboard
        input_dev_bus_type = virtio
        vir_domain_undefine_nvram = yes
        inactivity_watcher = none
        take_regular_screendumps = no
        aavmf_path = /usr/share/edk2/aarch64/
        aavmf_code_filename = QEMU_EFI-silent-pflash.raw
        aavmf_vars_filename = vars-template-pflash.raw
        unattended_install:
            restore_aavmf_vars = yes
    - arm64-pci:
        only aarch64
        auto_cpu_model = "no"
        cpu_model = host
        # TODO: Change to "gic-version=max" when supported
        machine_type = arm64-pci:virt
        machine_type_extra_params = gic-version=host
        # Only virtio-gpu-pci supported for now
        vga = virtio
        vir_domain_undefine_nvram = yes
        pcie_extra_root_port = 2
        aavmf_path = /usr/share/edk2/aarch64/
        aavmf_code_filename = QEMU_EFI-silent-pflash.raw
        aavmf_vars_filename = vars-template-pflash.raw
        unattended_install:
            restore_aavmf_vars = yes
    - riscv64-mmio:
        only riscv64
        # USB subsystem not available
        no usb, usb_device_check, boot_from_usb, usb_d
        no systemtap_tracing
        auto_cpu_model = "no"
        cpu_model = any
        machine_type = riscv64-mmio:virt
        # Only virtio-gpu supported for now
        vga = virtio
        inputs = mouse1 keyboard1
        input_dev_type_mouse1 = mouse
        input_dev_type_keyboard1 = keyboard
        input_dev_bus_type = virtio
        # Currently no USB support
        usbs =
        usb_devices =
    - s390-virtio:
        only s390x
        # USB subsystem not available
        no usb, usb_device_check, boot_from_usb, usb_d
        # Only virtio nic is available
        no nic_8139, nic_e1000
        # Suspend (to mem) is not supported
        no guest_s3, guest_s3_time_drift
        # Hibernate (to disk) is not yet supported by kernel
        no guest_s4, guest_s4_time_drift
        # This is virtio target, pci is not supported
        no pci_bridge, pci_devices
        # Memory subsystem is way different and hotplug is not to be supported any time soon
        no hotplug_memory, hotplug_memory_repeat
        # NMIs are only produced by machine checks
        no nmi_watchdog
        # No sound cards
        no audio
        # msi is mandatory on s390x
        no disable_msi
        # Only tod clock (timerdevice requires kvm-clock)
        no timerdevice
        auto_cpu_model = "no"
        cpu_model = host
        machine_type = s390-ccw-virtio
        # For not (and probably ever) only virtio VGA is supported
        vga = virtio
        inputs = mouse1 keyboard1
        input_dev_type_mouse1 = mouse
        input_dev_type_keyboard1 = keyboard
        input_dev_bus_type = virtio
        # Currently no USB support
        usbs =
        usb_devices =
        # The main disc is usually /dev/dasda device
        indirect_image_blacklist = "/dev/dasda[\d]*"
        serial_type = 'sclpconsole'

# network cards
variants:
    - rtl8139:
        no ppc64 ppc64le
        nic_model = rtl8139
    - e1000:
        no ppc64 ppc64le
        RHEL:
            only RHEL.6 RHEL.7
        nic_model = e1000
    - e1000-82540em:
        no ppc64 ppc64le
        nic_model = e1000-82540em
    - e1000-82544gc:
        no ppc64 ppc64le
        nic_model = e1000-82544gc
    - e1000-82545em:
        no ppc64 ppc64le
        nic_model = e1000-82545em
    - e1000e:
        only q35
        required_qemu = [2.6.0, )
        nic_model = e1000e
    - virtio_net:
        nic_model = virtio
        # Assign the queue number of nic device
        #queues = 4
        # You can add advanced attributes on nic_extra_params such as mrg_rxbuf
        #nic_extra_params =
        # You can add advanced attributes through netdev_extra_params
        # such as sndbuf, as an example, you can uncomment the
        # following lines to enable the vhost support ( only available
        # for tap )
        #netdev_extra_params = ",vhost=on"
        enable_msix_vectors = yes
        whql.submission.device.net:
            test_device = VirtIO Ethernet Adapter$
            # Device selection for the NDISTest client machine
            dp_regex_testdev = VirtIO Ethernet Adapter$
            dp_regex_clientmsgdev = VirtIO Ethernet Adapter #2$
            dp_regex_clientsupportdev = VirtIO Ethernet Adapter #3$
            # Device selection for the NDISTest server machine
            dp_regex_servermsgdev = VirtIO Ethernet Adapter$
            dp_regex_serversupportdev = VirtIO Ethernet Adapter #2$
        arm64-mmio, s390-virtio, riscv64-mmio:
            # Currently arm/s390x does not support msix vectors
            enable_msix_vectors = no
    - xennet:
        # placeholder
    - spapr-vlan:
        nic_model = spapr-vlan
        only pseries
    - nic_custom:
        # If people want to specify something different.

variants:
    - up:
        no autotest.npb autotest.tsc
    - smp2:
        smp = 2
        used_cpus = 2
        stress_boot: used_cpus = 10
        timedrift.with_load: used_cpus = 100

# storage devices
variants:
    - ide:
        no q35
        drive_format=ide
        cd_format=ide
    - scsi:
        drive_format=scsi
    - sd:
        drive_format=sd
    - virtio_blk:
        drive_format=virtio
        i440fx:
            cd_format=ide
        q35:
            cd_format=ahci
        # Add -drive ...boot=yes unless qemu-kvm is 0.12.1.2 or newer
        # then kvm_vm will ignore this option.
        image_boot~=yes
    - virtio_scsi:
        no WinXP
        # supported formats are: scsi-hd, scsi-cd, scsi-disk, scsi-block,
        # scsi-generic
        # Use drive_format_$DISKNAME = "scsi-generic" to force disk driver
        # for single disk.
        # NOTE:  scsi-block and scsi-generic are pass-through physical dev only
        drive_format=scsi-hd
        cd_format=scsi-cd
        scsi_hba=virtio-scsi-pci
        libvirt_controller=virtio-scsi
    - spapr_vscsi:
        drive_format=scsi-hd
        cd_format=scsi-cd
        scsi_hba=spapr-vscsi
        libvirt_controller=spapr-vscsi
        only pseries
    - lsi_scsi:
        no Host_RHEL
        drive_format=scsi-hd
        cd_format=scsi-cd
        scsi_hba=lsi53c895a
    - ahci:
        only q35
        drive_format=ahci
        cd_format=ahci
    - xenblk:
        # placeholder

variants:
    - luks:
        image_format = luks
        image_secret = redhat
    - qcow2v3:
        image_format = qcow2
        image_extra_params = "compat=1.1"
        check_image = yes
        qemu_io_blkdebug, rh_qemu_iotests:
            check_image = no
    - qcow2:
        image_format = qcow2
        check_image = yes
        qemu_io_blkdebug, rh_qemu_iotests:
            check_image = no
    - vmdk:
        no ioquit
        image_format = vmdk
    - raw:
        no ioquit
        image_format = raw
    - raw_dd:
        no ioquit
        image_format = raw
        create_with_dd = yes
        dd_create_cmd = "dd if=/dev/zero of=%s bs=1M count=%s"
    - qed:
        no ioquit
        image_format = qed
        check_image = yes

variants:
    - @no_pci_assignable:
        pci_assignable = no
    - pf_assignable:
        pci_assignable = pf
        host_setup_flag = 3
        # device_name is optional. If device_name not set, it will try to get
        # first available pf. If device_name set, but the device is not
        # available, it will also try to get first available pf.
        device_name = eth1
        nettype = bridge
        pf_filter_re = "82576 Gigabit Network"
        mac_ip_filter = "inet (.\d+.\d+.\d+.\d+).*?ether (.\w+:\w+:\w+:\w+:\w+:\w+)"
        RHEL.6, RHEL.5:
            mac_ip_filter = "HWaddr (.\w+:\w+:\w+:\w+:\w+:\w+)\s+?inet addr:(.\d+\.\d+\.\d+\.\d+)"
        mac_changeable = "yes"
        unattended_install:
            mac_changeable = no
    - vf_assignable:
        pci_assignable = vf
        nettype = bridge
        host_setup_flag = 3
        # Driver (kernel module) that supports SR-IOV hardware.
        # As of today (30-11-2009), we have 2 drivers for this type of hardware:
        # IntelÂ® 82576 Gigabit Ethernet Controller - igb
        # NeterionÂ® X3100â¢ - vxge
        # On PowerPC [Power 8] linux servers SR-IOV hardware supported:
        # Mellanox CX4 MT27700 Family
        # For PowerPC driver (kernel module) that supports SR-IOV hardware is
        # mlx5_core
        driver = igb
        # vf_filter_re: Regex used to filter vf from lspci.
        vf_filter_re = "Virtual Function"
        # pf_filter_re: Regex used to filter pf from lspci. It will be used
        # when device_name could not filter the pf.
        # For PowerPC: pf_filter_re = "MT27700 Family \[ConnectX-4\]"
        pf_filter_re = "82576 Gigabit Network"
        # Driver option to specify the maximum number of virtual functions
        # (on vxge the option is , for example, is max_config_dev)
        # the default below is for the igb driver
        # For PowerPC with mlx5_core: driver_option = "10" where 10 is numer of
        # virtual functions (VF). Maximum supported is 63 VF per port
        driver_option = "7"
        mac_ip_filter = "inet (.\d+.\d+.\d+.\d+).*?ether (.\w+:\w+:\w+:\w+:\w+:\w+)"
        RHEL.6, RHEL.5:
            mac_ip_filter = "HWaddr (.\w+:\w+:\w+:\w+:\w+:\w+)\s+?inet addr:(.\d+\.\d+\.\d+\.\d+)"
        mac_changeable = "yes"
        unattended_install:
            mac_changeable = no
        sr-iov.sr_iov_negative.negative_max_vfs:
            driver_option = "max_vfs=-1"
        sr-iov.sr_iov_negative.more_than_max_vfs:
            driver_option = "max_vfs=8"

variants:
    - @smallpages:
    - hugepages:
        hugepage = yes
        setup_hugepages = yes
        # In some special conditions, such as low mem PPC systems, you might
        # want to define how many large memory pages you want to set directly.
        # If you don't, avocado-vt will use an heuristic to calculate the number
        # (default). The heuristic can be found on virttest/test_setup.py
        #target_hugepages = 500

        # In some special conditions, such as low mem PPC systems, one might
        # want to set the overhead to 0, so leave this configurable. Keep in
        # mind that, if target_hugepages is set, this value will be ignored
        # since virt test won't try to calculate the required pages.
        hugepages_qemu_overhead = 128

        # Similarly, on low mem systems if you deallocate hugepages and try
        # to allocate them again it won't be possible to find contiguous pages,
        # so make it possible to turn it off by setting this to 'no'.
        hugepages_deallocate = yes

        # Some other params that one might find useful to configure
        extra_params += " -mem-path /mnt/kvm_hugepage"
        domain_xml_snippet = "<memoryBacking><hugepages/></memoryBacking>"

variants:
    - @no_9p_export:
    - 9p_export:
        # 9p_fs_driver support include local, handle, proxy
        9p_fs_driver = local
        9p_export_dir = /mnt/
        # 9p_security_model support include passthrough, mapped, none
        9p_security_model = passthrough
        9p_immediate_writeout = no
        9p_readonly = no
        # Only used in case of proxy fs driver
        #9p_socket_name = /tmp/virtfs-9p-socket
        #9p_proxy_binary = virtfs-proxy-helper

variants:
    - @no_virtio_rng:
        virtio_rngs =
    - virtio_rng:
        no Host_RHEL.m5 Host_RHEL.m6.u0 Host_RHEL.m6.u1 Host_RHEL.m6.u2 Host_RHEL.m6.u3 Host_RHEL.m6.u4 Host_RHEL.m6.u5
        virtio_rngs += " rng0"
        #max-bytes_virtio-rng-pci =
        #period_virtio-rng-pci =
        variants:
             - rng_builtin:
                 required_qemu ~= [4.2, )
                 backend_rng0 = rng-builtin
                 backend_type = builtin
             - rng_random:
                 backend_rng0 = rng-random
                 backend_type = passthrough
                 filename_passthrough = /dev/urandom
             - rng_egd:
                 backend_rng0 = rng-egd
                 backend_type = chardev
                 rng_chardev_backend = socket
                 socket_type = tcp
                 host_tcp = localhost
                 port_tcp = 8000
                 # if egd.pl started on remote host, please set setup_egd = no
                 setup_egd = yes
variants:
    - @default_bios:
    - ovmf:
        no i386 ppc64 ppc64le s390x
        no Win2003 WinXP WinVista
        # Please update this based on your test env
        ovmf_path = /usr/share/edk2/ovmf/
        ovmf_code_filename = OVMF_CODE.fd
        ovmf_vars_filename = OVMF_VARS.fd
        unattended_install:
            restore_ovmf_vars = yes
            Windows:
                send_key_at_install = ret
